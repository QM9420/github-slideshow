import random
import pandas as pd
import torch
from torch import nn
import torchvision.datasets as dsets
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import numpy as np
import torch.nn.functional as F
import  random
import openpyxl
import xlwings as xw

def create_dataset(data):
    dataset_x,dataset_y = [],[]
    height,width = data.shape

    for i in range(width):
        x_ = data[:height-1,i]

        dataset_x.append(x_)
        dataset_y.append(data[-1,i])

    return np.array(dataset_x),np.array(dataset_y)
def create_dataset1(data):
    dataset_x,dataset_y,dataset_target = [],[],[]
    height,width = data.shape

    for i in range(width):
        x_ = data[:height-2,i]

        dataset_x.append(x_)
        dataset_y.append(data[-1,i])
        dataset_target.append(data[-2,i])
    return np.array(dataset_x),np.array(dataset_y),np.array(dataset_target)

def np_count(nparray, x):
    i = 0
    for n in nparray:
        if n == x:
            i += 1
    return i

def data_shuffle(data):

    data = np.transpose(data)


    np.random.shuffle(data)

    data = np.transpose(data)


    return data

class LSTM_classifier(nn.Module):

    def __init__(self,input_size,hidden_size,num_layer):
        super().__init__()

        self.lstm = nn.LSTM(
            input_size=input_size,  # 特征数量
            hidden_size=hidden_size,  # LSTM hidden unit
            num_layers=num_layer,  # 有几层 LSTM layers

        )
        self.sigmoid = torch.nn.Sigmoid()
        self.l1 = nn.Linear(hidden_size,32 )
        self.l2 = nn.Linear(48, 48)
        self.l3 = nn.Linear(32,2)

    def forward(self,x):
        # x shape (batch, time_step, input_size)
        # lout shape (batch, time_step, output_size)
        # h_n shape (n_layers, batch, hidden_size)   LSTM 有两个 hidden states, h_n 是分线, h_c 是主线
        # h_c shape (n_layers, batch, hidden_size)

        lout, (h_n, h_c) = self.lstm(x, None)  # None 表示 hidden state 会用全0的 state

        # 选取最后一个时间点的 r_out 输出
        # 这里 r_out[:, -1, :] 的值也是 h_n 的值

        x1 = self.l1(lout[:, -1, :])
        # print(x1.size())
        # x1 = self.sigmoid(x1)
        #


        # x1 = self.sigmoid(self.l3(x1))

        # out = self.out(lout[:, -1, :])

        # out = out.squeeze(0)

        # out = out.view()

        # out = F.softmax(out,1)

        # print("LSTM的OUT",out.size())
        return x1
def write_excel5(WDate,index,layer):
    data = pd.DataFrame(WDate)
    # write_path = "new/1/5/3/wrong_index_0_%d.xlsx"%(index)
    write_path = "new/1/5/wrong_index_%d_%d.xlsx"%(layer,index)
    writer = pd.ExcelWriter(write_path)
    # 数据写入
    data.to_excel(writer,'page_1',index=False)
    writer.save()
    writer.close()
    print('%d文件已完成写入'%index)

def write_excel6(WDate,LR,kind):
    data = pd.DataFrame(WDate)
    # write_path = "new/1/5/3/wrong_index_0_%d.xlsx"%(index)
    write_path = "new/1/5/4/learningRate_%d_%s.xlsx" % (LR,kind)
    writer = pd.ExcelWriter(write_path)
    # 数据写入
    data.to_excel(writer,'page_1',index=False)
    writer.save()
    writer.close()
    print('%d文件已完成写入'%LR)

def write_excel7(WDate,k,kind):
    data = pd.DataFrame(WDate)
    # write_path = "new/1/5/3/wrong_index_0_%d.xlsx"%(index)
    write_path = "new/1/5/4/train_%d_%s.xlsx" % (k,kind)
    writer = pd.ExcelWriter(write_path)
    # 数据写入
    data.to_excel(writer,'page_1',index=False)
    writer.save()
    writer.close()
    print('%d文件已完成写入'%k)
def write_excel8(WDate,k,kind,tt):
    data = pd.DataFrame(WDate)
    # write_path = "new/1/5/3/wrong_index_0_%d.xlsx"%(index)
    write_path = "new/1/5/4/train_%d_%s_%s.xlsx" % (k,tt,kind)
    writer = pd.ExcelWriter(write_path)
    # 数据写入
    data.to_excel(writer,'page_1',index=False)
    writer.save()
    writer.close()
    print('%d文件已完成写入'%k)
def write_excel9(WDate,layer,k,kind,tt):
    data = pd.DataFrame(WDate)
    # write_path = "new/1/5/3/wrong_index_0_%d.xlsx"%(index)
    write_path = "new/1/5/4/train_%d_%d_%s_%s.xlsx" % (layer,k,tt,kind)
    writer = pd.ExcelWriter(write_path)
    # 数据写入
    data.to_excel(writer,'page_1',index=False)
    writer.save()
    writer.close()
    print('%d文件已完成写入'%k)
def write_excel4(WDate,index,layer,kind):
    data = pd.DataFrame(WDate)
    # write_path = "new/1/5/3/wrong_index_0_%d.xlsx"%(index)
    write_path = "new/1/5/4/results_%d_%d_%s.xlsx" % (layer,index,kind)
    writer = pd.ExcelWriter(write_path)
    # 数据写入
    data.to_excel(writer,'page_1',index=False)
    writer.save()
    writer.close()
    print('%d文件已完成写入'%index)
    '''
    book = openpyxl.load_workbook(write_path )  # 读取你要写入的workbook
    # 和pd.read_excel() 用于将Dataframe写入excel。xls用xlwt。xlsx用openpyxl

    writer = pd.ExcelWriter(write_path , engine='openpyxl')
     ##此时的writer里还只是读写器. 然后将上面读取的book复制给writer
    writer.book = book


    # 转化为字典的形式

    writer.sheets = dict((ws.title, ws) for ws in book.worksheets)
    # 将data写入writer

    data.to_excel(writer, sheet_name="1", index=False)

    writer.save()
    writer.close()
    '''
def check_wrong(index,results,w0,w1,w2):
    wrong_index = np.where(results != 0)
    index_0 = index[wrong_index]
    # print(index_0)
    index_01 = index[np.where(results == -1)]
    index_11 = index[np.where(results == 1)]

    lens = len(index_0)
    for i in range(lens ):
        w0.append(index_0[i])
    lens = len(index_01)
    for i in range(lens):
        w1.append(index_01[i])
    lens = len(index_11)
    for i in range(lens):
        w2.append(index_11[i])
    # write_excel4(index_0,0)
    # write_excel4(index_01,1)
    # write_excel4(index_11,2)
    return w0,w1,w2

# def wreshape(w):
#     height,width = w.shape()
#     w0 = []
#     for i in range()
